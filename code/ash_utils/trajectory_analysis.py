"""
Using mdtraj to handle xyz trajectory from ASH OpenMM interface
"""

from __future__ import print_function
import mdtraj as md
import numpy as np
import matplotlib.pyplot as plt
import scipy.cluster.hierarchy
from scipy.spatial.distance import squareform

#trajectory file generated by ASH interface with OpenMM
TRAJ = r"/scratch/09069/dhp563/ash/FeS_Az_nocluster/OpenMMOpt_traj.xyz"
#ASH solvated system pdb file
TOP = r"/scratch/09069/dhp563/ash/FeS_Az_nocluster/system_aftersolvent_ions.pdb"
ATOM_INDICES = np.arange(0, 1830)

traj = md.load_xyz(TRAJ, top = TOP)

distances = np.empty((traj.n_frames, traj.n_frames))
for i in range(traj.n_frames):
    distances[i] = md.rmsd(traj, traj, i, atom_indices = ATOM_INDICES)
print('Max pairwise rmsd: %f nm' % np.max(distances))
print('Full distance')
print(distances)

def plot_1d_array(array):
    # Create a 1D numpy array
    x = np.linspace(0, len(array), len(array))
    y = array

    # Plot the 1D array
    plt.figure(figsize=(10, 4))
    plt.plot(x, y)
    plt.xlabel('time (pico seconds)', fontsize=20)
    plt.ylabel('RMSD', fontsize=20)
    plt.title('Plot of rmsd trajectory with respect to frame 0', fontsize=24)
    #rescale so that the plot fits the figure
    plt.tight_layout()
    plt.savefig('rmsd_plot.png')

plot_1d_array(distances[0])

# Clustering only accepts reduced form. Squareform's checks are too stringent
#assert np.all(distances - distances.T < 1e-6)
reduced_distances = squareform(distances, checks=False)

linkage = scipy.cluster.hierarchy.linkage(reduced_distances, method='average')

